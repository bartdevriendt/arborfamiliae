@using ArborFamiliae.Domain.Events
@using ArborFamiliae.Domain.Enums
@using Syncfusion.Blazor.Navigations.Internal
@using SelectionMode = Syncfusion.Blazor.Grids.SelectionMode
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@using System.Windows.Forms
@using System.ComponentModel
@inject IPersonEventService PersonEventService


<TwoRowLayout>
    <Row1>
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem Text="@Loc["Add"]" PrefixIcon="bi bi-plus-lg" OnClick="AddNewEvent"></ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
    </Row1>
    <Row2>
        <SfGrid @ref="_eventGrid" DataSource="Events" AllowGrouping="true">
            <GridSelectionSettings Mode="SelectionMode.Row" Type="SelectionType.Single"></GridSelectionSettings>
            <GridGroupSettings Columns="@_groupColumns"></GridGroupSettings>
            <GridEvents TValue="EventAddEditModel" CommandClicked="OnCommandClicked"></GridEvents>
            <GridColumns>
                <GridColumn Field="Category" HeaderText="@Loc["Category"]" AllowGrouping="true"></GridColumn>
                <GridColumn Field="TypeDescription" HeaderText="@Loc["Type"]"></GridColumn>
                <GridColumn Field="Description" HeaderText="@Loc["Description"]"></GridColumn>
                <GridColumn Field="DateText" HeaderText="@Loc["Date"]"></GridColumn>
                <GridColumn Field="PlaceName" HeaderText="@Loc["Place"]"></GridColumn>
                <GridColumn Field="Participants" HeaderText="@Loc["Main Participants"]"></GridColumn>
                <GridColumn Field="RoleDescription" HeaderText="@Loc["Role"]"></GridColumn>
                <GridColumn Field="ArborId" HeaderText="@Loc["ID"]"></GridColumn>
                <GridColumn Field="Age" HeaderText="@Loc["Age"]"></GridColumn>
                <GridColumn HeaderText="">
                    <GridCommandColumns>
                        <GridCommandColumn Title="Edit" ButtonOption="@(new CommandButtonOptions() { Content = "", CssClass = "bi bi-pencil" })"></GridCommandColumn>
                        <GridCommandColumn Title="Delete" ButtonOption="@(new CommandButtonOptions() { Content = "", CssClass = "bi bi-trash" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </Row2>
</TwoRowLayout>

<SfDialog IsModal="true" @bind-Visible="@PopupVisible">
    <DialogTemplates>
        <Header>@Loc["Add Event"]</Header>
        <Content>
            <EventInput Model="_addEditModel" EventSave="OnEventSave"></EventInput>
        </Content>
    </DialogTemplates>
</SfDialog>


@code {

    SfGrid<EventAddEditModel> _eventGrid;

    private bool isNew = false;
    
    [Parameter]
    public Guid PersonId { get; set; }

    public enum EventListMode
    {
        Person,
        Family
    }
    
    [Parameter]
    public EventListMode EventMode { get; set; }
    
    [Parameter]
    public EventCallback<EventAddEditModel> EventDeleted { get; set; }


    [Parameter]
    public BindingList<EventAddEditModel> Events { get; set; } = new();
    
    
    [Parameter]
    public EventCallback<BindingList<EventAddEditModel>> EventsChanged { get; set; }
    
    private EventAddEditModel _addEditModel = new();

    private string[] _groupColumns = new[] { "Category" };
    
    bool PopupVisible { get; set; } = false;
    
    private object SelectedEvent { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        
        
    }
   
    private void AddNewEvent()
    {

        _addEditModel = new();
        isNew = true;
        
        if (EventMode == EventListMode.Person)
        {
            _addEditModel.Role = EventRole.PRIMARY;
            _addEditModel.ListType = EventListType.Person;
            _addEditModel.Category = "Personal";
        }
        else
        {
            _addEditModel.Role = EventRole.FAMILY;
            _addEditModel.ListType = EventListType.Family;
            _addEditModel.Category = "Family";
        }

        PopupVisible = true;
    }

    private async Task OnEventSave()
    {
        PopupVisible = false;

        if (isNew)
        {
            Events.Add(_addEditModel);    
        }
        
        _addEditModel.DateText = _addEditModel.Date?.Text;
        _addEditModel.TypeDescription = _addEditModel.Type.ToString();
        await _eventGrid.Refresh();
    }

    private async Task RowDoubleClick()
    {

        _addEditModel = await PersonEventService.GetEventById(((EventListModel)SelectedEvent).Id);
        PopupVisible = true;
    }

    private async Task OnCommandClicked(CommandClickEventArgs<EventAddEditModel> obj)
    {
        if (obj.CommandColumn.Title == "Edit")
        {
            isNew = false;
            if (obj.RowData.ListType == EventListType.Family && EventMode == EventListMode.Family ||
                obj.RowData.ListType == EventListType.Person && EventMode == EventListMode.Person)
            {
                _addEditModel = obj.RowData;
                PopupVisible = true;
            }
        }
        else if(obj.CommandColumn.Title == "Delete")
        {
            if (obj.RowData.ListType == EventListType.Family && EventMode == EventListMode.Family ||
                obj.RowData.ListType == EventListType.Person && EventMode == EventListMode.Person)
            {
                await EventDeleted.InvokeAsync(obj.RowData);
                await _eventGrid.Refresh();
            }
        }
    }

}