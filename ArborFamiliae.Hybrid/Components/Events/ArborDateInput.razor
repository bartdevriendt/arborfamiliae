@using ArborFamiliae.Domain.Events
@using ArborFamiliae.Services.Common
@inject DateParserService DateParserService
 
<SfTextBox Value="@Text"
           ValueExpression="@(() => Text)"
           ShowClearButton="true"
           ValueChanged="ValueChanged">
    
</SfTextBox>

@* <DxTextBox Text="@Text" *@
@*            TextExpression="@(() => Text)" *@
@*            BindValueMode="BindValueMode.OnLostFocus" TextChanged="TextChanged" > *@
@*     <Buttons> *@
@*         <DxEditorButton IconCssClass="bi bi-pencil" Tooltip="Advanced date" Click="OnAdvancedEdit"></DxEditorButton> *@
@*     </Buttons> *@
@* </DxTextBox> *@

<SfDialog Header="Advanced editor" @bind-Visible="IsAdvancedEditorVisible">
    <DialogTemplates>
            <Content> This is the advanced editor </Content>
        </DialogTemplates>
</SfDialog>

@code {

    [Parameter]
    public ArborDateModel Date { get; set; } = new();

    [Parameter]
    public EventCallback<ArborDateModel> DateChanged { get; set; }

    private string Text;

    protected override async Task OnParametersSetAsync()
    {
        if (Date != null)
        {
            Text = Date.ConvertToDisplay();
        }
        
    }

    private bool IsAdvancedEditorVisible { get; set; }
    
    private void OnAdvancedEdit()
    {
        IsAdvancedEditorVisible = true;
    }

    private void ValidateDate()
    {
        Console.WriteLine("Validate date: " + Text);
    }

    private async Task TextChanged(string text)
    {
        
    }

    private async Task ValueChanged(string text)
    {
        var parsed = DateParserService.ParseDate(text);
        Text = text;
        if (parsed != null)
        {
            Date = parsed;
        }

        await DateChanged.InvokeAsync(Date);
    }

}