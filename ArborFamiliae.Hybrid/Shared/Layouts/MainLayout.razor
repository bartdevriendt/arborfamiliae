@using MudBlazor
@using ArborFamiliae.Hybrid.Shared.Theme
@inherits LayoutComponentBase


<MudThemeProvider Theme="_currentTheme" />
<MudSnackbarProvider />

<ErrorBoundary>
    
    <ChildContent>
        <MudLayout>
            <MudAppBar Elevation="25">
                <MudText Typo="Typo.h6" Class="ml-4">Arbor Familiae</MudText>
                <MudToolBar DisableGutters="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3"/>
                </MudToolBar>
                <MudSpacer/>
                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                    <MudTooltip Text="Dark Mode">
                        <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => DarkMode())"/>
                    </MudTooltip>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    <MudMenu Icon="@Icons.Filled.Settings" Color="Color.Inherit" Dense="true" Direction="Direction.Right" OffsetY="true">
                        <div class="px-2">
                            <MudTooltip Text="Dark Mode">
                                <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => DarkMode())"/>
                            </MudTooltip>
                        </div>
                    </MudMenu>
                </MudHidden>
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="DrawerClipMode.Always">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </ChildContent>
    <ErrorContent Context="error_context">
        <div>Error occurred @error_context.Message</div>
    </ErrorContent>
        
    
    
    
</ErrorBoundary>


@code {
    private MudTheme _currentTheme;
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    
    protected override async Task OnInitializedAsync()
    {
        _currentTheme = ArborTheme.DefaultTheme;
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkMode()
    {
        _isDarkMode = !_isDarkMode;
        _currentTheme = _isDarkMode
            ? ArborTheme.DarkTheme
            : ArborTheme.DefaultTheme;
    }
}