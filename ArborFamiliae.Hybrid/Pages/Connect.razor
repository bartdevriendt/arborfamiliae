@page "/connect"
@inherits BasePageComponent
@layout ConnectLayout

@using ArborFamiliae.Services.Common
@using ArborFamiliae.Data.InternalModels
@using ArborFamiliae.Hybrid.Services
@using ArborFamiliae.Hybrid.Shared.Layouts
@using ArborFamiliae.Hybrid.Shared.Models
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType

<h3>@Loc["Load family tree"]</h3>

<TwoRowLayout>
    <Row1>
        
        <SfGrid @ref="_connectGrid" DataSource="_databases">
            <GridSelectionSettings Type="SelectionType.Single"
                                   Mode="SelectionMode.Row"></GridSelectionSettings>
            <GridEvents TValue="FamilyTreeDatabase" OnRecordDoubleClick="ConnectionSelected"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(FamilyTreeDatabase.Name)" HeaderText="@Loc["Name"]"></GridColumn>
            </GridColumns>
        </SfGrid>
        
    </Row1>
    <Row2>
        <SfButton IsPrimary="true" @onclick="LoadDatabase">@Loc["Load"]</SfButton>
    </Row2>
</TwoRowLayout>

@code {

    private SfGrid<FamilyTreeDatabase> _connectGrid;

    private FamilyTreeDatabaseService _databaseService;

    private List<FamilyTreeDatabase> _databases;
    
    

    protected override async Task OnInitializedAsync()
    {
        _databaseService = new FamilyTreeDatabaseService();
        _databases = _databaseService.LoadDatabases();
        
    }

    private async Task LoadDatabase()
    {

        var records = await _connectGrid.GetSelectedRecordsAsync();
        
        if (records.Count == 0)
        {
            Snackbar.Add(@Loc["Please select a family tree"], Severity.Error);
            return;
        }
        
        FamilyTreeDatabase db = records[0];
        if (db.DatabaseType == Provider.MySql.Name)
        {
            var builder = new MySqlConnector.MySqlConnectionStringBuilder();
            builder.Database = db.Database;
            builder.UserID = db.Username;
            builder.Password = db.Password;
            builder.Server = db.Server;

            ConnectionStringService.ConnectionString = builder.ConnectionString;
            ConnectionStringService.Provider = db.DatabaseType;

        }
        
        NavigationManager.NavigateTo("/seed", forceLoad: true);   
    }

    private async Task ConnectionSelected()
    {
        await LoadDatabase();
    }

}